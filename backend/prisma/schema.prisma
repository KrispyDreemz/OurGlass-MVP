// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = env("DATABASE_PROVIDER")
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  passwordHash   String         @map("password_hash")
  createdAt      DateTime       @default(now()) @map("created_at")
  name           String?
  role           String?
  artworks       Artwork[]
  galleryArtworks GalleryArtwork[]
  bids           Bid[]
  sponsorships   Sponsorship[]
  sponsorshipAuctions SponsorshipAuction[]
}

model Artwork {
  id             Int             @id @default(autoincrement())
  artist         User            @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId       String
  title          String
  description    String
  imageUrl       String
  status         String          // 'pending', 'active', 'sold'
  auctions       Auction[]
  sponsorships   Sponsorship[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Auction {
  id             Int             @id @default(autoincrement())
  artwork        Artwork         @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  artworkId      Int
  type           String          // 'sponsorship' or 'ownership'
  startTime      DateTime
  endTime        DateTime
  reservePrice   Float
  bids           Bid[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([startTime])
}

model Bid {
  id             Int             @id @default(autoincrement())
  auction        Auction         @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId      Int
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  amount         Float
  createdAt      DateTime        @default(now())

  @@index([auctionId])
}

model Sponsorship {
  id             Int             @id @default(autoincrement())
  artwork        Artwork         @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  artworkId      Int
  sponsor        User            @relation(fields: [sponsorId], references: [id], onDelete: Cascade)
  sponsorId      String
  bidAmount      Float
  won            Boolean
  campaignUrl    String?
  createdAt      DateTime        @default(now())

  @@index([artworkId])
}

enum GalleryStatus {
  pending
  approved
  rejected
}

model GalleryArtwork {
  id                     Int      @id @default(autoincrement())
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String
  title                  String
  description            String?
  priceEstimate          Float?   @map("price_estimate")
  imageUrl               String?  @map("image_url")
  status                 GalleryStatus @default(pending)
  createdAt              DateTime @default(now()) @map("created_at")
  sponsorshipPhaseStart  DateTime? @map("sponsorship_phase_start")
  ownershipPhaseStart    DateTime? @map("ownership_phase_start")
  sponsorshipAuctions    SponsorshipAuction[]

  @@map("artworks")
}

enum SponsorshipAuctionStatus {
  open
  closed
  winner_selected
}

model SponsorshipAuction {
  id        String                     @id @default(uuid())
  artwork   GalleryArtwork             @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  artworkId Int                        @map("artwork_id")
  user      User?                      @relation(fields: [userId], references: [id])
  userId    String?                    @map("user_id")
  bidAmount Float?                     @default(0) @map("bid_amount")
  endsAt    DateTime                   @map("ends_at")
  status    SponsorshipAuctionStatus   @default(open)

  @@map("sponsorship_auctions")
  @@index([artworkId])
  @@index([endsAt])
}
